[project]
name = "advance-agent"
version = "0.1.0"
description = "Advanced Enterprise AI Agent System with OpenAI Agents SDK"
readme = "README.md"
authors = [
    { name = "ShazilK47", email = "shazil.akn@gmail.com" }
]
requires-python = ">=3.10"
dependencies = [
    "openai>=1.40.0",
    "agents>=0.2.11",
    "pydantic>=2.8.0",
    "fastapi>=0.112.0",
    "uvicorn[standard]>=0.30.0",
    "python-multipart>=0.0.9",
    "aiofiles>=24.1.0",
    "redis>=5.0.0",
    "asyncpg>=0.29.0",
    "sqlalchemy>=2.0.30",
    "alembic>=1.13.0",
    "httpx>=0.27.0",
    "structlog>=24.2.0",
    "prometheus-client>=0.20.0",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-dotenv>=1.0.0",
    "typer>=0.12.0",
    "rich>=13.7.0",
    "pytest>=8.2.0",
    "pytest-asyncio>=0.23.0",
    "pytest-mock>=3.14.0",
    "coverage>=7.6.12",
    "cryptography>=42.0.0",
    "requests>=2.32.0",
    "aiohttp>=3.9.0",
    "click>=8.1.0",
    "pytest-cov>=5.0.0",
    "black>=24.4.0",
    "isort>=5.13.0",
    "flake8>=7.1.0",
    "mypy>=1.10.0",
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.0",
    "jinja2>=3.1.0",
    "pydantic-settings>=2.10.1",
    "psutil>=7.0.0",
]

[project.scripts]
advance-agent = "advance_agent.cli:main"

[project.optional-dependencies]
dev = [
    "mypy>=1.8.0",
    "ruff>=0.1.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "pre-commit>=3.0.0"
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.ruff]
line-length = 100
target-version = "py310"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
isort = { combine-as-imports = true, known-first-party = ["advance_agent"] }

[tool.mypy]
strict = true
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["src"]
omit = ["tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]
